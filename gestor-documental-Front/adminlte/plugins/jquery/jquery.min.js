/* jQuery 3.6.0 simplificado para el proyecto */
(function(global, factory) {
    "use strict";
    if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = global.document ?
            factory(global, true) :
            function(w) {
                if (!w.document) {
                    throw new Error("jQuery requires a window with a document");
                }
                return factory(w);
            };
    } else {
        factory(global);
    }
})(typeof window !== "undefined" ? window : this, function(window, noGlobal) {
    "use strict";

    var jQuery = function(selector, context) {
        return new jQuery.fn.init(selector, context);
    };

    jQuery.fn = jQuery.prototype = {
        init: function(selector, context) {
            if (!selector) {
                return this;
            }
            if (typeof selector === "string") {
                if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
                    // HTML string
                    var temp = document.createElement("div");
                    temp.innerHTML = selector;
                    var nodes = temp.childNodes;
                    for (var i = 0; i < nodes.length; i++) {
                        this[i] = nodes[i];
                    }
                    this.length = nodes.length;
                } else {
                    // CSS selector
                    var elements = document.querySelectorAll(selector);
                    for (var i = 0; i < elements.length; i++) {
                        this[i] = elements[i];
                    }
                    this.length = elements.length;
                }
            } else if (selector.nodeType) {
                // DOM element
                this[0] = selector;
                this.length = 1;
            }
            return this;
        },
        length: 0,
        each: function(callback) {
            for (var i = 0; i < this.length; i++) {
                callback.call(this[i], i, this[i]);
            }
            return this;
        },
        addClass: function(className) {
            this.each(function() {
                if (this.classList) {
                    this.classList.add(className);
                } else {
                    this.className += " " + className;
                }
            });
            return this;
        },
        removeClass: function(className) {
            this.each(function() {
                if (this.classList) {
                    this.classList.remove(className);
                } else {
                    this.className = this.className.replace(new RegExp("(^|\\s)" + className + "(\\s|$)", "g"), " ");
                }
            });
            return this;
        },
        on: function(event, handler) {
            this.each(function() {
                this.addEventListener(event, handler);
            });
            return this;
        },
        off: function(event, handler) {
            this.each(function() {
                this.removeEventListener(event, handler);
            });
            return this;
        },
        val: function(value) {
            if (value !== undefined) {
                this.each(function() {
                    this.value = value;
                });
                return this;
            } else {
                return this[0] ? this[0].value : undefined;
            }
        },
        text: function(value) {
            if (value !== undefined) {
                this.each(function() {
                    this.textContent = value;
                });
                return this;
            } else {
                return this[0] ? this[0].textContent : undefined;
            }
        },
        html: function(value) {
            if (value !== undefined) {
                this.each(function() {
                    this.innerHTML = value;
                });
                return this;
            } else {
                return this[0] ? this[0].innerHTML : undefined;
            }
        }
    };

    jQuery.fn.init.prototype = jQuery.fn;

    // Utility functions
    jQuery.ajax = function(options) {
        var xhr = new XMLHttpRequest();
        var method = options.method || "GET";
        var url = options.url;
        var data = options.data;
        var success = options.success;
        var error = options.error;

        xhr.open(method, url, true);
        
        if (options.headers) {
            for (var header in options.headers) {
                xhr.setRequestHeader(header, options.headers[header]);
            }
        }

        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                if (xhr.status >= 200 && xhr.status < 300) {
                    if (success) {
                        var response = xhr.responseText;
                        try {
                            response = JSON.parse(response);
                        } catch (e) {
                            // Keep as string if not JSON
                        }
                        success(response);
                    }
                } else {
                    if (error) {
                        error(xhr);
                    }
                }
            }
        };

        if (data) {
            if (typeof data === "object") {
                data = JSON.stringify(data);
                xhr.setRequestHeader("Content-Type", "application/json");
            }
            xhr.send(data);
        } else {
            xhr.send();
        }
    };

    // Global jQuery
    if (!noGlobal) {
        window.jQuery = window.$ = jQuery;
    }

    return jQuery;
});
